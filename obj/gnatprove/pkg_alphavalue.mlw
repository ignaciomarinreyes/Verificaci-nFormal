(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "t_string" defined at pkg_alphavalue.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__t_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type t_string__ref =
  { mutable t_string__content : t_string }
 
 function t_string__ref_t_string__content__projection 
   (a : t_string__ref) : t_string =
  a.t_string__content
 
 meta "model_projection" function t_string__ref_t_string__content__projection
 
 meta "inline:no" function t_string__ref_t_string__content__projection
 
 val t_string__havoc 
   (x : t_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "t_array" defined at pkg_alphavalue.ads:4, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__natural.natural
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Standard__natural__rep.to_rep (get a temp___idx_154)) = (Standard__natural__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Standard__natural__rep.to_rep (get a temp___idx_154)) = (Standard__natural__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "t_array" defined at pkg_alphavalue.ads:4, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__natural__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__natural as Array__Int__Standard__natural

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__natural.component_type, 
 type map = Array__Int__Standard__natural.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__natural.get

end

(* Module for axiomatizing comparison for the array theory associated to type "t_array" defined at pkg_alphavalue.ads:4, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__natural_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural__rep as Standard__natural__rep
 use        Array__Int__Standard__natural as Array__Int__Standard__natural

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__natural.component_type, 
 function to_rep = Standard__natural__rep.to_rep, 
 type map = Array__Int__Standard__natural.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__natural.get, 
 function bool_eq = Array__Int__Standard__natural.bool_eq

end

(* Module for axiomatizing type "t_array" defined at pkg_alphavalue.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__t_array
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__natural as Array__Int__Standard__natural

 type component_type =
  Standard__natural.natural
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t_array =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type t_array__ref =
  { mutable t_array__content : t_array }
 
 function t_array__ref_t_array__content__projection 
   (a : t_array__ref) : t_array =
  a.t_array__content
 
 meta "model_projection" function t_array__ref_t_array__content__projection
 
 meta "inline:no" function t_array__ref_t_array__content__projection
 
 val t_array__havoc 
   (x : t_array__ref) : unit
  writes {x}

end

(* Module for defining the constant "instr" defined at pkg_alphavalue.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Pkg_alphavalue__alphavalue__instr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Pkg_alphavalue__t_string as Pkg_alphavalue__t_string

 val constant instr [#"pkg_alphavalue.ads" 6 0 0][@model_projected] [@model_trace:2541] [@name:InStr] 
   : Pkg_alphavalue__t_string.t_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "instr" defined at pkg_alphavalue.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_alphavalue__alphavalue__instr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T8s" defined at pkg_alphavalue.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__alphavalue__L7s__T8s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t8s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t8s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t8s__ref =
  { mutable t8s__content : t8s }
 
 function t8s__ref_t8s__content__projection 
   (a : t8s__ref) : t8s =
  a.t8s__content
 
 meta "model_projection" function t8s__ref_t8s__content__projection
 
 meta "inline:no" function t8s__ref_t8s__content__projection
 
 val t8s__havoc 
   (x : t8s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10s" defined at pkg_alphavalue.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__alphavalue__L9s__T10s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref =
  { mutable t10s__content : t10s }
 
 function t10s__ref_t10s__content__projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref_t10s__content__projection
 
 meta "inline:no" function t10s__ref_t10s__content__projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "alphavalue" defined at pkg_alphavalue.ads:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pkg_alphavalue__alphavalue
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Pkg_alphavalue__t_string as Pkg_alphavalue__t_string
 use        Pkg_alphavalue__t_array as Pkg_alphavalue__t_array

 val function alphavalue 
   (instr : Pkg_alphavalue__t_string.t_string) : Pkg_alphavalue__t_array.t_array
 
 val predicate alphavalue__function_guard 
   (temp___result_155 : Pkg_alphavalue__t_array.t_array) (instr : Pkg_alphavalue__t_string.t_string)

end

(* Module for axiomatizing type "TS1bP1" defined at pkg_alphavalue.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__alphavalue__TS1bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content : tS1bP1 }
 
 function tS1bP1__ref_tS1bP1__content__projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref_tS1bP1__content__projection
 
 meta "inline:no" function tS1bP1__ref_tS1bP1__content__projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at pkg_alphavalue.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__alphavalue__S1b
 use export Pkg_alphavalue__t_string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s1b =
  t_string
 
 type s1b__ref =
  { mutable s1b__content : s1b }
 
 function s1b__ref_s1b__content__projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref_s1b__content__projection
 
 meta "inline:no" function s1b__ref_s1b__content__projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TToutarraySP1" defined at pkg_alphavalue.adb:4, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__alphavalue__TToutarraySP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tToutarraySP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tToutarraySP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tToutarraySP1__ref =
  { mutable tToutarraySP1__content : tToutarraySP1 }
 
 function tToutarraySP1__ref_tToutarraySP1__content__projection 
   (a : tToutarraySP1__ref) : tToutarraySP1 =
  a.tToutarraySP1__content
 
 meta "model_projection" function tToutarraySP1__ref_tToutarraySP1__content__projection
 
 meta "inline:no" function tToutarraySP1__ref_tToutarraySP1__content__projection
 
 val tToutarraySP1__havoc 
   (x : tToutarraySP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "ToutarrayS" defined at pkg_alphavalue.adb:4, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__alphavalue__ToutarrayS
 use export Pkg_alphavalue__t_array
 use        "_gnatprove_standard".Main
 use        "int".Int

 type toutarrayS =
  t_array
 
 type toutarrayS__ref =
  { mutable toutarrayS__content : toutarrayS }
 
 function toutarrayS__ref_toutarrayS__content__projection 
   (a : toutarrayS__ref) : toutarrayS =
  a.toutarrayS__content
 
 meta "model_projection" function toutarrayS__ref_toutarrayS__content__projection
 
 meta "inline:no" function toutarrayS__ref_toutarrayS__content__projection
 
 val toutarrayS__havoc 
   (x : toutarrayS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at pkg_alphavalue.adb:4, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__alphavalue__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t2b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref =
  { mutable t2b__content : t2b }
 
 function t2b__ref_t2b__content__projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref_t2b__content__projection
 
 meta "inline:no" function t2b__ref_t2b__content__projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3b" defined at pkg_alphavalue.adb:4, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__alphavalue__T3b
 use export Pkg_alphavalue__t_array
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t3b =
  t_array
 
 type t3b__ref =
  { mutable t3b__content : t3b }
 
 function t3b__ref_t3b__content__projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref_t3b__content__projection
 
 meta "inline:no" function t3b__ref_t3b__content__projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4b" defined at pkg_alphavalue.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__alphavalue__L_1__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t4b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t4b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4b__ref =
  { mutable t4b__content : t4b }
 
 function t4b__ref_t4b__content__projection 
   (a : t4b__ref) : t4b =
  a.t4b__content
 
 meta "model_projection" function t4b__ref_t4b__content__projection
 
 meta "inline:no" function t4b__ref_t4b__content__projection
 
 val t4b__havoc 
   (x : t4b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T8b" defined at pkg_alphavalue.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__alphavalue__L_1__L7b__T8b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t8b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t8b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t8b__ref =
  { mutable t8b__content : t8b }
 
 function t8b__ref_t8b__content__projection 
   (a : t8b__ref) : t8b =
  a.t8b__content
 
 meta "model_projection" function t8b__ref_t8b__content__projection
 
 meta "inline:no" function t8b__ref_t8b__content__projection
 
 val t8b__havoc 
   (x : t8b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6b" defined at pkg_alphavalue.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Pkg_alphavalue__alphavalue__L_1__L5b__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t6b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t6b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t6b__ref =
  { mutable t6b__content : t6b }
 
 function t6b__ref_t6b__content__projection 
   (a : t6b__ref) : t6b =
  a.t6b__content
 
 meta "model_projection" function t6b__ref_t6b__content__projection
 
 meta "inline:no" function t6b__ref_t6b__content__projection
 
 val t6b__havoc 
   (x : t6b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "outarray" defined at pkg_alphavalue.adb:4, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_alphavalue__alphavalue__outarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__natural as Array__Int__Standard__natural

 val outarray [#"pkg_alphavalue.adb" 4 0 0][@model_trace:2326] [@model_projected] [@name:OutArray]  : Array__Int__Standard__natural.map__ref 
 
 val constant outarray__first [#"pkg_alphavalue.adb" 4 0 0][@model_projected] [@name:OutArray] [@model_trace:2326'First] 
   : Standard__integer.integer

 
 val constant outarray__last [#"pkg_alphavalue.adb" 4 0 0][@model_projected] [@name:OutArray] [@model_trace:2326'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "outarray" defined at pkg_alphavalue.adb:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_alphavalue__alphavalue__outarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at pkg_alphavalue.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Pkg_alphavalue__alphavalue__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"pkg_alphavalue.adb" 6 0 0][@model_projected] [@name:I] [@model_trace:2347]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at pkg_alphavalue.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_alphavalue__alphavalue__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for defining the loop exit exception for the loop "L_1" defined at pkg_alphavalue.adb:6, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Pkg_alphavalue__alphavalue__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at pkg_alphavalue.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pkg_alphavalue__alphavalue__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "t_string" defined at pkg_alphavalue.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__t_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Pkg_alphavalue__t_string as Pkg_alphavalue__t_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_160 : Pkg_alphavalue__t_string.t_string) (temp___is_init_156 : bool) (temp___skip_constant_157 : bool) (temp___do_toplevel_158 : bool) (temp___do_typ_inv_159 : bool) =
  (if (temp___skip_constant_157) then (
   true) else (
   (Pkg_alphavalue__t_string.dynamic_property Standard__positive.first Standard__positive.last (Pkg_alphavalue__t_string.first temp___expr_160) (Pkg_alphavalue__t_string.last temp___expr_160))))
 val dynamic_invariant [@inline] 
   (temp___expr_160 : Pkg_alphavalue__t_string.t_string) (temp___is_init_156 : bool) (temp___skip_constant_157 : bool) (temp___do_toplevel_158 : bool) (temp___do_typ_inv_159 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_160 : Pkg_alphavalue__t_string.t_string) (temp___is_init_156 : bool) (temp___skip_constant_157 : bool) (temp___do_toplevel_158 : bool) (temp___do_typ_inv_159 : bool) }

end

(* Module giving axioms for type "t_array" defined at pkg_alphavalue.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__t_array___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Pkg_alphavalue__t_array as Pkg_alphavalue__t_array

 predicate dynamic_invariant [@inline] 
   (temp___expr_166 : Pkg_alphavalue__t_array.t_array) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) =
  (if (temp___skip_constant_163) then (
   true) else (
   (Pkg_alphavalue__t_array.dynamic_property Standard__positive.first Standard__positive.last (Pkg_alphavalue__t_array.first temp___expr_166) (Pkg_alphavalue__t_array.last temp___expr_166))))
 val dynamic_invariant [@inline] 
   (temp___expr_166 : Pkg_alphavalue__t_array.t_array) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_166 : Pkg_alphavalue__t_array.t_array) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) }

end

(* Module giving axioms for type "T8s" defined at pkg_alphavalue.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__alphavalue__L7s__T8s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10s" defined at pkg_alphavalue.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__alphavalue__L9s__T10s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS1bP1" defined at pkg_alphavalue.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__alphavalue__TS1bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S1b" defined at pkg_alphavalue.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__alphavalue__S1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Pkg_alphavalue__t_string as Pkg_alphavalue__t_string
 use        Pkg_alphavalue__alphavalue__instr as Pkg_alphavalue__alphavalue__instr
 use        Pkg_alphavalue__alphavalue__S1b as Pkg_alphavalue__alphavalue__S1b

 predicate dynamic_invariant [@inline] 
   (temp___expr_176 : Pkg_alphavalue__alphavalue__S1b.s1b) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool) =
  (if (temp___skip_constant_173) then (
   true) else (
   ( (Pkg_alphavalue__alphavalue__S1b.dynamic_property (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr) (Pkg_alphavalue__alphavalue__S1b.first temp___expr_176) (Pkg_alphavalue__alphavalue__S1b.last temp___expr_176)) /\ ( ((Pkg_alphavalue__alphavalue__S1b.first temp___expr_176) = (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr)) /\ ((Pkg_alphavalue__alphavalue__S1b.last temp___expr_176) = (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_176 : Pkg_alphavalue__alphavalue__S1b.s1b) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_176 : Pkg_alphavalue__alphavalue__S1b.s1b) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_178 : Pkg_alphavalue__alphavalue__S1b.s1b) (temp___skip_top_level_179 : bool) =
  ( ( true /\ ((Pkg_alphavalue__alphavalue__S1b.first temp___expr_178) = (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr)) )/\((Pkg_alphavalue__alphavalue__S1b.last temp___expr_178) = (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) )
 val default_initial_assumption [@inline] 
   (temp___expr_178 : Pkg_alphavalue__alphavalue__S1b.s1b) (temp___skip_top_level_179 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_178 : Pkg_alphavalue__alphavalue__S1b.s1b) (temp___skip_top_level_179 : bool) }

end

(* Module giving axioms for type "TToutarraySP1" defined at pkg_alphavalue.adb:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__alphavalue__TToutarraySP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "ToutarrayS" defined at pkg_alphavalue.adb:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__alphavalue__ToutarrayS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Pkg_alphavalue__t_string as Pkg_alphavalue__t_string
 use        Pkg_alphavalue__alphavalue__instr as Pkg_alphavalue__alphavalue__instr
 use        Pkg_alphavalue__alphavalue__ToutarrayS as Pkg_alphavalue__alphavalue__ToutarrayS

 predicate dynamic_invariant [@inline] 
   (temp___expr_186 : Pkg_alphavalue__alphavalue__ToutarrayS.toutarrayS) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) =
  (if (temp___skip_constant_183) then (
   true) else (
   ( (Pkg_alphavalue__alphavalue__ToutarrayS.dynamic_property (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr) (Pkg_alphavalue__alphavalue__ToutarrayS.first temp___expr_186) (Pkg_alphavalue__alphavalue__ToutarrayS.last temp___expr_186)) /\ ( ((Pkg_alphavalue__alphavalue__ToutarrayS.first temp___expr_186) = (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr)) /\ ((Pkg_alphavalue__alphavalue__ToutarrayS.last temp___expr_186) = (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_186 : Pkg_alphavalue__alphavalue__ToutarrayS.toutarrayS) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_186 : Pkg_alphavalue__alphavalue__ToutarrayS.toutarrayS) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_188 : Pkg_alphavalue__alphavalue__ToutarrayS.toutarrayS) (temp___skip_top_level_189 : bool) =
  ( ( true /\ ((Pkg_alphavalue__alphavalue__ToutarrayS.first temp___expr_188) = (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr)) )/\((Pkg_alphavalue__alphavalue__ToutarrayS.last temp___expr_188) = (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) )
 val default_initial_assumption [@inline] 
   (temp___expr_188 : Pkg_alphavalue__alphavalue__ToutarrayS.toutarrayS) (temp___skip_top_level_189 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_188 : Pkg_alphavalue__alphavalue__ToutarrayS.toutarrayS) (temp___skip_top_level_189 : bool) }

end

(* Module giving axioms for type "T2b" defined at pkg_alphavalue.adb:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__alphavalue__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3b" defined at pkg_alphavalue.adb:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__alphavalue__T3b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at pkg_alphavalue.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__alphavalue__L_1__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T8b" defined at pkg_alphavalue.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__alphavalue__L_1__L7b__T8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at pkg_alphavalue.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pkg_alphavalue__alphavalue__L_1__L5b__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring an abstract function for the aggregate at pkg_alphavalue.adb:4, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Pkg_alphavalue__alphavalue__outarray__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Pkg_alphavalue__alphavalue__T3b as Pkg_alphavalue__alphavalue__T3b

 val function pkg_alphavalue__alphavalue__outarray__aggregate_def 
   (temp___193 : int) (temp___194 : int) (temp___195 : int) : Pkg_alphavalue__alphavalue__T3b.t3b

end
(* Module for declaring a program function (and possibly an axiom) for "alphavalue" defined at pkg_alphavalue.ads:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pkg_alphavalue__alphavalue___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Pkg_alphavalue__t_string as Pkg_alphavalue__t_string
 use        Pkg_alphavalue__t_array as Pkg_alphavalue__t_array
 use        Pkg_alphavalue__alphavalue as Pkg_alphavalue__alphavalue
 use        Pkg_alphavalue__t_string___axiom as Pkg_alphavalue__t_string___axiom
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Pkg_alphavalue__t_array___axiom as Pkg_alphavalue__t_array___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val alphavalue 
   (instr : Pkg_alphavalue__t_string.t_string) : Pkg_alphavalue__t_array.t_array
  requires {  ( ( [@GP_Pretty_Ada:2574] ((Pkg_alphavalue__t_string.length instr) >= (1 : int)) ) /\ (forall x   [@name:x] [@model_trace:2577]  : int.
   ( ( ((Pkg_alphavalue__t_string.first instr) <= x) /\ (x <= (Pkg_alphavalue__t_string.last instr)) ) -> ( [@GP_Pretty_Ada:2594] ( ((0 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) x))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) x)) <= (255 : int)) ) ) )) ) }
  ensures {  ( ( (result = (Pkg_alphavalue__alphavalue.alphavalue instr)) /\ (Pkg_alphavalue__alphavalue.alphavalue__function_guard result instr) )/\( (Pkg_alphavalue__t_array___axiom.dynamic_invariant result True False True True) /\ ( ( [@GP_Pretty_Ada:2606] ((Pkg_alphavalue__t_array.length result) = (Pkg_alphavalue__t_string.length instr)) ) /\ (forall i   [@name:i] [@model_trace:2611]  : int.
   ( ( ((Pkg_alphavalue__t_array.first result) <= i) /\ (i <= (Pkg_alphavalue__t_array.last result)) ) -> (if (( ((97 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) i))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) i)) <= (122 : int)) )) then (
    ( [@GP_Pretty_Ada:2639] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Pkg_alphavalue__t_array.to_array result) i)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) i)) - (96 : int))) )) else ((if (( ((65 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) i))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) i)) <= (90 : int)) )) then (
    ( [@GP_Pretty_Ada:2663] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Pkg_alphavalue__t_array.to_array result) i)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) i)) - (64 : int))) )) else (
    ( [@GP_Pretty_Ada:2677] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Pkg_alphavalue__t_array.to_array result) i)) = (0 : int)) ))))) )) ) ) ) }
 
 axiom alphavalue__post_axiom :
  (forall instr   : Pkg_alphavalue__t_string.t_string [(Pkg_alphavalue__alphavalue.alphavalue instr)].
   ( ( (Pkg_alphavalue__t_string___axiom.dynamic_invariant instr True True True True) /\ ( ( [@GP_Pretty_Ada:2574] ((Pkg_alphavalue__t_string.length instr) >= (1 : int)) ) /\ (forall x   [@name:x] [@model_trace:2577]  : int.
    ( ( ((Pkg_alphavalue__t_string.first instr) <= x) /\ (x <= (Pkg_alphavalue__t_string.last instr)) ) -> ( [@GP_Pretty_Ada:2594] ( ((0 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) x))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) x)) <= (255 : int)) ) ) )) ) ) -> (let result = (Pkg_alphavalue__alphavalue.alphavalue instr) in (
    (if ((Pkg_alphavalue__alphavalue.alphavalue__function_guard result instr)) then (
     ( ( ( ( [@GP_Pretty_Ada:2606] ((Pkg_alphavalue__t_array.length result) = (Pkg_alphavalue__t_string.length instr)) ) /\ (forall i   [@name:i] [@model_trace:2611]  : int.
      ( ( ((Pkg_alphavalue__t_array.first result) <= i) /\ (i <= (Pkg_alphavalue__t_array.last result)) ) -> (if (( ((97 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) i))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) i)) <= (122 : int)) )) then (
       ( [@GP_Pretty_Ada:2639] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Pkg_alphavalue__t_array.to_array result) i)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) i)) - (96 : int))) )) else ((if (( ((65 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) i))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) i)) <= (90 : int)) )) then (
       ( [@GP_Pretty_Ada:2663] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Pkg_alphavalue__t_array.to_array result) i)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array instr) i)) - (64 : int))) )) else (
       ( [@GP_Pretty_Ada:2677] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Pkg_alphavalue__t_array.to_array result) i)) = (0 : int)) ))))) )) ) /\ (Pkg_alphavalue__t_array___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "pkg_alphavalue" defined at pkg_alphavalue.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Pkg_alphavalue__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int

 let def [#"pkg_alphavalue.ads" 1 0 0][@GP_Subp:pkg_alphavalue.ads:1] 
   (__void_param : unit)
  requires { [#"pkg_alphavalue.ads" 1 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"pkg_alphavalue.ads" 1 0 0] ());
  ([#"pkg_alphavalue.ads" 3 0 0] ());
  ([#"pkg_alphavalue.ads" 4 0 0] ());
  ([#"pkg_alphavalue.ads" 6 0 0] ());
  ([#"pkg_alphavalue.ads" 15 0 0] ());
  ([#"pkg_alphavalue.ads" 14 0 0] ());
  ([#"pkg_alphavalue.ads" 13 0 0] ());
  ([#"pkg_alphavalue.ads" 12 0 0] ());
  ([#"pkg_alphavalue.ads" 12 0 0] ());
  ([#"pkg_alphavalue.ads" 12 0 0] ());
  ([#"pkg_alphavalue.ads" 12 0 0] ());
  ();
  ([#"pkg_alphavalue.adb" 1 0 0] ());
  ([#"pkg_alphavalue.adb" 3 0 0] ());
  ();
  ( [@GP_Sloc:pkg_alphavalue.adb:25:1] ([#"pkg_alphavalue.adb" 25 0 0] ()) ) )
end

(* Module for defining the value of the aggregate at pkg_alphavalue.adb:4, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Pkg_alphavalue__alphavalue__outarray__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Pkg_alphavalue__t_array as Pkg_alphavalue__t_array
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Pkg_alphavalue__alphavalue__T3b as Pkg_alphavalue__alphavalue__T3b
 use        Pkg_alphavalue__alphavalue__outarray__aggregate_def as Pkg_alphavalue__alphavalue__outarray__aggregate_def
 use        Array__Int__Standard__natural as Array__Int__Standard__natural

 axiom def_axiom :
  (forall temp___193   temp___194   temp___195   : int.
   (let temp___192 [@mlw:proxy_symbol] [@introduced] = (Pkg_alphavalue__alphavalue__outarray__aggregate_def.pkg_alphavalue__alphavalue__outarray__aggregate_def temp___193 temp___194 temp___195) in (
    (if ((Standard__natural___axiom.dynamic_invariant temp___193 True True True True)) then (
     ( (if ((Pkg_alphavalue__t_array.dynamic_property Standard__positive.first Standard__positive.last temp___194 temp___195)) then (
      ( ((Pkg_alphavalue__alphavalue__T3b.first temp___192) = temp___194) /\ ((Pkg_alphavalue__alphavalue__T3b.last temp___192) = temp___195) )) else true) /\ (forall temp___196   : int.
      ((Array__Int__Standard__natural.get (Pkg_alphavalue__alphavalue__T3b.to_array temp___192) temp___196) = ( 0 : Standard__natural.natural ))) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "alphavalue" defined at pkg_alphavalue.ads:6, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pkg_alphavalue__alphavalue__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Pkg_alphavalue__t_string as Pkg_alphavalue__t_string
 use        Pkg_alphavalue__alphavalue__instr as Pkg_alphavalue__alphavalue__instr
 use        Pkg_alphavalue__t_array as Pkg_alphavalue__t_array
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Pkg_alphavalue__alphavalue__outarray as Pkg_alphavalue__alphavalue__outarray
 use        Pkg_alphavalue__alphavalue__L_1__i as Pkg_alphavalue__alphavalue__L_1__i
 use        Pkg_alphavalue__t_string___axiom as Pkg_alphavalue__t_string___axiom
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Pkg_alphavalue__alphavalue__ToutarrayS as Pkg_alphavalue__alphavalue__ToutarrayS
 use        Pkg_alphavalue__alphavalue__T3b as Pkg_alphavalue__alphavalue__T3b
 use        Pkg_alphavalue__alphavalue__L_1 as Pkg_alphavalue__alphavalue__L_1
 use        Pkg_alphavalue__alphavalue__L_1__T4b as Pkg_alphavalue__alphavalue__L_1__T4b
 use        Pkg_alphavalue__alphavalue__outarray__aggregate_def as Pkg_alphavalue__alphavalue__outarray__aggregate_def
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__natural as Array__Int__Standard__natural
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Pkg_alphavalue__alphavalue__outarray___axiom as Pkg_alphavalue__alphavalue__outarray___axiom
 use        Pkg_alphavalue__alphavalue__outarray__aggregate_def___axiom as Pkg_alphavalue__alphavalue__outarray__aggregate_def___axiom
 use        Pkg_alphavalue__alphavalue__L_1__i___axiom as Pkg_alphavalue__alphavalue__L_1__i___axiom
 use        Pkg_alphavalue__alphavalue__L_1___axiom as Pkg_alphavalue__alphavalue__L_1___axiom
 use        Pkg_alphavalue__t_string___axiom as Pkg_alphavalue__t_string___axiom
 use        Pkg_alphavalue__t_array___axiom as Pkg_alphavalue__t_array___axiom
 use        Pkg_alphavalue__alphavalue__instr___axiom as Pkg_alphavalue__alphavalue__instr___axiom
 use        Pkg_alphavalue__alphavalue__ToutarrayS___axiom as Pkg_alphavalue__alphavalue__ToutarrayS___axiom
 use        Pkg_alphavalue__alphavalue__T3b___axiom as Pkg_alphavalue__alphavalue__T3b___axiom
 use        Pkg_alphavalue__alphavalue__L_1__T4b___axiom as Pkg_alphavalue__alphavalue__L_1__T4b___axiom

 val pkg_alphavalue__alphavalue__result [@model_projected] [@model_trace:2534@result] [@name:alphaValue]  : Pkg_alphavalue__t_array.t_array__ref 
 
 let def [#"pkg_alphavalue.ads" 6 0 0][@GP_Subp:pkg_alphavalue.ads:6] 
   (__void_param : unit)
  requires { [#"pkg_alphavalue.ads" 6 0 0] true }
  ensures { [#"pkg_alphavalue.ads" 6 0 0] ([#"pkg_alphavalue.ads" 15 0 0] ( [@GP_Sloc:pkg_alphavalue.ads:15:18] [@GP_Reason:VC_POSTCONDITION] [@comment:      Post    => (alphaValue'Result'Length = InStr'Length and then(                                                                                   ^ pkg_alphavalue.ads:15:18:VC_POSTCONDITION] [@GP_Shape:pragargs__andthen] [@model_vc_post] [@GP_Id:20] ( ( [@GP_Sloc:pkg_alphavalue.ads:15:19] [@GP_Pretty_Ada:2606] ((Pkg_alphavalue__t_array.length pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content) = (Pkg_alphavalue__t_string.length Pkg_alphavalue__alphavalue__instr.instr)) ) /\ (forall i [#"pkg_alphavalue.ads" 15 0 0]  [@name:i] [@model_trace:2611]  : int.
   ( ( ((Pkg_alphavalue__t_array.first pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content) <= i) /\ (i <= (Pkg_alphavalue__t_array.last pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content)) ) -> (if (( ((97 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) i))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) i)) <= (122 : int)) )) then (
    ( [@GP_Sloc:pkg_alphavalue.ads:18:29] [@GP_Pretty_Ada:2639] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Pkg_alphavalue__t_array.to_array pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content) i)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) i)) - (96 : int))) )) else ((if (( ((65 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) i))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) i)) <= (90 : int)) )) then (
    ( [@GP_Pretty_Ada:2663] [@GP_Sloc:pkg_alphavalue.ads:20:29] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Pkg_alphavalue__t_array.to_array pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content) i)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) i)) - (64 : int))) )) else (
    ( [@GP_Pretty_Ada:2677] [@GP_Sloc:pkg_alphavalue.ads:22:29] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Pkg_alphavalue__t_array.to_array pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content) i)) = (0 : int)) ))))) )) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram pkg_alphavalue.ads:6 *)
  ;
   assume {  (Pkg_alphavalue__t_string___axiom.dynamic_invariant Pkg_alphavalue__alphavalue__instr.instr True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pkg_alphavalue.ads:6 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pkg_alphavalue.ads:6 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb(((  begin ensures {true} let _ = (let _ = Pkg_alphavalue__alphavalue__instr.instr in (
   ()))
   in () end ;
  (Pkg_alphavalue__t_string.length(Pkg_alphavalue__alphavalue__instr.instr)) ) >= (1 : int))) (( (let x =  (val _f : int
  in _f) in (
   (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = Pkg_alphavalue__alphavalue__instr.instr in (
    ()))
    in () end ;
   (Pkg_alphavalue__t_string.first(Pkg_alphavalue__alphavalue__instr.instr)) ) <= x)) ((x <= (  begin ensures {true} let _ = (let _ = Pkg_alphavalue__alphavalue__instr.instr in (
    ()))
    in () end ;
   (Pkg_alphavalue__t_string.last(Pkg_alphavalue__alphavalue__instr.instr)) ))))) then (
     begin ensures {true} let _ = (let _ = (Boolean.andb(((0 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.ads" 14 0 0] ( [@GP_Shape:pragargs__and__forall__in__typeconv__pos_ref__ixdcomp] [@GP_Id:19] [@comment:      Pre     => InStr'Length >= 1 and (for all x in InStr'Range => (Character'Pos(InStr(x)) in 0..255)),                                                                                          ^ pkg_alphavalue.ads:14:90:VC_INDEX_CHECK] [@GP_Sloc:pkg_alphavalue.ads:14:90] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= x) /\ (x <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
    x ))))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.ads" 14 0 0] ( [@GP_Shape:pragargs__and__forall__in__typeconv__pos_ref__ixdcomp] [@GP_Id:19] [@comment:      Pre     => InStr'Length >= 1 and (for all x in InStr'Range => (Character'Pos(InStr(x)) in 0..255)),                                                                                          ^ pkg_alphavalue.ads:14:90:VC_INDEX_CHECK] [@GP_Sloc:pkg_alphavalue.ads:14:90] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= x) /\ (x <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
    x ))))) <= (255 : int)))) in (
     ()))
     in () end ))))
  ;
   (val _f : bool
  ensures { ( (result = True) <-> (forall x   [@name:x] [@model_trace:2577]  : int.
   ( ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= x) /\ (x <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) -> ( [@GP_Pretty_Ada:2594] ( ((0 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) x))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) x)) <= (255 : int)) ) ) )) )} 
  in _f) ))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram pkg_alphavalue.ads:6 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:2574] ((Pkg_alphavalue__t_string.length Pkg_alphavalue__alphavalue__instr.instr) >= (1 : int)) ) /\ (forall x   [@name:x] [@model_trace:2577]  : int.
   ( ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= x) /\ (x <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) -> ( [@GP_Pretty_Ada:2594] ( ((0 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) x))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) x)) <= (255 : int)) ) ) )) ) };
   try
   ( ();
   ([#"pkg_alphavalue.adb" 3 0 0] ());
   ([#"pkg_alphavalue.adb" 4 0 0] ([#"pkg_alphavalue.adb" 4 0 0] [#"pkg_alphavalue.adb" 4 0 0] (val _f : unit
   requires {( [@GP_Sloc:pkg_alphavalue.adb:4:9] [@comment:        OutArray : T_Array(InStr'Range) := (others => 0);               ^ pkg_alphavalue.adb:4:9:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:0] [#"pkg_alphavalue.adb" 4 0 0] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) -> ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) >= Standard__positive.first) /\ ((Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr) <= Standard__positive.last) ) ) )} 
   ensures {[#"pkg_alphavalue.adb" 4 0 0] true} 
   in _f)));
   ([#"pkg_alphavalue.adb" 4 0 0] ( (let pkg_alphavalue__alphavalue__outarray__assume = (let temp___198 [@mlw:proxy_symbol] [@introduced] = (let temp___197 [@mlw:proxy_symbol] [@introduced] = (Pkg_alphavalue__alphavalue__outarray__aggregate_def.pkg_alphavalue__alphavalue__outarray__aggregate_def((0 : int)) ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr)) ((Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr))) in (
    ( [#"pkg_alphavalue.adb" 4 0 0] assume { [#"pkg_alphavalue.adb" 4 0 0] ((Pkg_alphavalue__alphavalue__T3b.first temp___197) = (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr)) };
    [#"pkg_alphavalue.adb" 4 0 0] assume { [#"pkg_alphavalue.adb" 4 0 0] ((Pkg_alphavalue__alphavalue__T3b.last temp___197) = (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) };
    temp___197 )))
    in (
    ( [#"pkg_alphavalue.adb" 4 0 0] assert { [#"pkg_alphavalue.adb" 4 0 0] ([#"pkg_alphavalue.adb" 4 0 0] ( [@GP_Sloc:pkg_alphavalue.adb:4:44] [@vc:annotation] [@comment:        OutArray : T_Array(InStr'Range) := (others => 0);                                                  ^ pkg_alphavalue.adb:4:44:VC_LENGTH_CHECK] [@GP_Id:1] [@GP_Shape:outarray_decl__aggr] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Pkg_alphavalue__alphavalue__T3b.first temp___198) <= (Pkg_alphavalue__alphavalue__T3b.last temp___198))) then (
     ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) /\ (((Pkg_alphavalue__alphavalue__T3b.last temp___198) - (Pkg_alphavalue__alphavalue__T3b.first temp___198)) = ((Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr) - (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr))) )) else (
     ((Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr) < (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr)))) ) )) };
    (Pkg_alphavalue__alphavalue__ToutarrayS.of_array((Array__Int__Standard__natural.slide((Pkg_alphavalue__alphavalue__T3b.to_array(temp___198))) ((Pkg_alphavalue__alphavalue__T3b.first(temp___198))) ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr)))) ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr)) ((Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr))) )))
    in (
    (  (Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content <- ( (Pkg_alphavalue__alphavalue__ToutarrayS.to_array(pkg_alphavalue__alphavalue__outarray__assume)) ));
     assume {  ((Standard__integer__rep.to_rep(Pkg_alphavalue__alphavalue__outarray.outarray__first)) = (Pkg_alphavalue__alphavalue__ToutarrayS.first(pkg_alphavalue__alphavalue__outarray__assume))) };
     assume {  ((Standard__integer__rep.to_rep(Pkg_alphavalue__alphavalue__outarray.outarray__last)) = (Pkg_alphavalue__alphavalue__ToutarrayS.last(pkg_alphavalue__alphavalue__outarray__assume))) } )))
   ;
    assume {  (if (False) then (
    true) else (
    ( (Pkg_alphavalue__alphavalue__ToutarrayS.dynamic_property (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr) (Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) (Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__last)) /\ ( ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) = (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr)) /\ ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__last) = (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) ))) } ));
   ([#"pkg_alphavalue.adb" 6 0 0] ());
   ();
   ( [@GP_Sloc:pkg_alphavalue.adb:6:33] ([#"pkg_alphavalue.adb" 6 0 0] (let temp___200 [@mlw:proxy_symbol] [@introduced] = ( [#"pkg_alphavalue.adb" 6 0 0] begin ensures {true} let _ = (let _ = Pkg_alphavalue__alphavalue__instr.instr in (
    ()))
    in () end ;
   (Pkg_alphavalue__t_string.first(Pkg_alphavalue__alphavalue__instr.instr)) ) in (
   (let temp___201 [@mlw:proxy_symbol] [@introduced] = ( [#"pkg_alphavalue.adb" 6 0 0] begin ensures {true} let _ = (let _ = Pkg_alphavalue__alphavalue__instr.instr in (
    ()))
    in () end ;
   (Pkg_alphavalue__t_string.last(Pkg_alphavalue__alphavalue__instr.instr)) ) in (
    ( [#"pkg_alphavalue.adb" 6 0 0] (Pkg_alphavalue__alphavalue__L_1__i.i.int__content <- ( temp___200 ));
    () (* Translation of an Ada loop from pkg_alphavalue.adb:6 *)
    ;
    (if ((Boolean.andb((temp___200 <= Pkg_alphavalue__alphavalue__L_1__i.i.int__content)) ((Pkg_alphavalue__alphavalue__L_1__i.i.int__content <= temp___201)))) then (
     [#"pkg_alphavalue.adb" 6 0 0] try
      ( [#"pkg_alphavalue.adb" 6 0 0] begin ensures {true} let _ = (let _ = Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content in (
       ()))
       in () end ;
      (let temp___204 [@mlw:proxy_symbol] [@introduced] = [#"pkg_alphavalue.adb" 6 0 0] (val _f : Array__Int__Standard__natural.map
      ensures {[#"pkg_alphavalue.adb" 6 0 0] (result = Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content)} 
      in _f) in (
       ( [#"pkg_alphavalue.adb" 6 0 0] begin ensures {true} let _ = (let _ = Pkg_alphavalue__alphavalue__L_1__i.i.int__content in (
        ()))
        in () end ;
       (let temp___202 [@mlw:proxy_symbol] [@introduced] = [#"pkg_alphavalue.adb" 6 0 0] (val _f : int
       ensures {[#"pkg_alphavalue.adb" 6 0 0] (result = Pkg_alphavalue__alphavalue__L_1__i.i.int__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop pkg_alphavalue.adb:6 *)
        ;
        ();
        ( [@GP_Sloc:pkg_alphavalue.adb:8:16] ([#"pkg_alphavalue.adb" 8 0 0] (if (( ([#"pkg_alphavalue.adb" 8 0 0] [#"pkg_alphavalue.adb" 8 0 0] (([@branch_id=2360] Main.spark__branch).bool__content <- ( (Boolean.andb(((65 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))) <= (90 : int)))) )));
        ( [@branch_id=2360] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:pkg_alphavalue.adb:9:20] ([#"pkg_alphavalue.adb" 9 0 0] ()) );
         ( [@GP_Sloc:pkg_alphavalue.adb:9:33] ([#"pkg_alphavalue.adb" 9 0 0] [#"pkg_alphavalue.adb" 9 0 0] (Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content) ((Standard__natural__rep.of_rep(([#"pkg_alphavalue.adb" 9 0 0] ( [@comment:                   OutArray (I) := Character'Pos(InStr(I)) - 64;                                                            ^ pkg_alphavalue.adb:9:60:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:pkg_alphavalue.adb:9:60] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_while__if__outarray_assign__sub] [@GP_Id:2] (Standard__natural.range_check_(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))) - (64 : int)))) )))))) ))) ) )) else (
         ( [@GP_Sloc:pkg_alphavalue.adb:10:16] (if (( ([#"pkg_alphavalue.adb" 10 0 0] [#"pkg_alphavalue.adb" 10 0 0] (([@branch_id=2385] Main.spark__branch).bool__content <- ( (Boolean.andb(((97 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))) <= (122 : int)))) )));
         ( [@branch_id=2385] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:pkg_alphavalue.adb:11:20] ([#"pkg_alphavalue.adb" 11 0 0] ()) );
          ( [@GP_Sloc:pkg_alphavalue.adb:11:33] ([#"pkg_alphavalue.adb" 11 0 0] [#"pkg_alphavalue.adb" 11 0 0] (Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content) ((Standard__natural__rep.of_rep(([#"pkg_alphavalue.adb" 11 0 0] ( [@GP_Sloc:pkg_alphavalue.adb:11:60] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_while__if__outarray_assign__sub] [@comment:                   OutArray (I) := Character'Pos(InStr(I)) - 96;                                                            ^ pkg_alphavalue.adb:11:60:VC_RANGE_CHECK] [@GP_Id:3] (Standard__natural.range_check_(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))) - (96 : int)))) )))))) ))) ) )) else (
          ())) )))) );
        () (* While loop translating the Ada loop from pkg_alphavalue.adb:6 *)
        ;
        (let temp___inv_206 [@mlw:proxy_symbol] [@introduced] = ( (let j =  (val _f : int
        in _f) in (
         (if ((Boolean.andb(((Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content in (
          ()))
          in () end ;
         Pkg_alphavalue__alphavalue__outarray.outarray__first ))) <= j)) ((j <= Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))) then (
           begin ensures {true} let _ = (let _ = (if ((Boolean.andb(((97 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.adb" 15 0 0] ( [@GP_Id:10] [@GP_Shape:L_1_while__pragargs__forall__if__in__typeconv__pos_ref__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:                                          (if Character'Pos(InStr(j)) in 97..122 then                                                                     ^ pkg_alphavalue.adb:15:67:VC_INDEX_CHECK] [@GP_Sloc:pkg_alphavalue.adb:15:67] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= j) /\ (j <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
          j ))))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.adb" 15 0 0] ( [@GP_Id:10] [@GP_Shape:L_1_while__pragargs__forall__if__in__typeconv__pos_ref__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:                                          (if Character'Pos(InStr(j)) in 97..122 then                                                                     ^ pkg_alphavalue.adb:15:67:VC_INDEX_CHECK] [@GP_Sloc:pkg_alphavalue.adb:15:67] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= j) /\ (j <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
          j ))))) <= (122 : int))))) then (
           ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content) ((  assert {  ([#"pkg_alphavalue.adb" 16 0 0] ( [@vc:annotation] [@comment:                                               OutArray(j) = Character'Pos(InStr(j)) - 96                                                         ^ pkg_alphavalue.adb:16:57:VC_INDEX_CHECK] [@GP_Sloc:pkg_alphavalue.adb:16:57] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp] [@GP_Id:4] ( ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__last)) ) )) };
           j ))))) = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.adb" 16 0 0] ( [@GP_Shape:L_1_while__pragargs__forall__if__cmp__sub__typeconv__pos_ref__ixdcomp] [@vc:annotation] [@GP_Sloc:pkg_alphavalue.adb:16:82] [@comment:                                               OutArray(j) = Character'Pos(InStr(j)) - 96                                                                                  ^ pkg_alphavalue.adb:16:82:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:5] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= j) /\ (j <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
           j ))))) - (96 : int)))) else ((if ((Boolean.andb(((65 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.adb" 17 0 0] ( [@GP_Sloc:pkg_alphavalue.adb:17:70] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__if__if__in__typeconv__pos_ref__ixdcomp] [@comment:                                           elsif Character'Pos(InStr(j)) in 65..90 then                                                                      ^ pkg_alphavalue.adb:17:70:VC_INDEX_CHECK] [@GP_Id:9] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= j) /\ (j <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
          j ))))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.adb" 17 0 0] ( [@GP_Sloc:pkg_alphavalue.adb:17:70] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__if__if__in__typeconv__pos_ref__ixdcomp] [@comment:                                           elsif Character'Pos(InStr(j)) in 65..90 then                                                                      ^ pkg_alphavalue.adb:17:70:VC_INDEX_CHECK] [@GP_Id:9] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= j) /\ (j <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
          j ))))) <= (90 : int))))) then (
           ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content) ((  assert {  ([#"pkg_alphavalue.adb" 18 0 0] ( [@GP_Shape:L_1_while__pragargs__forall__if__if__cmp__ixdcomp] [@vc:annotation] [@GP_Sloc:pkg_alphavalue.adb:18:57] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:6] [@comment:                                               OutArray(j) = Character'Pos(InStr(j)) - 64                                                         ^ pkg_alphavalue.adb:18:57:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__last)) ) )) };
           j ))))) = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.adb" 18 0 0] ( [@vc:annotation] [@GP_Sloc:pkg_alphavalue.adb:18:82] [@GP_Shape:L_1_while__pragargs__forall__if__if__cmp__sub__typeconv__pos_ref__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@comment:                                               OutArray(j) = Character'Pos(InStr(j)) - 64                                                                                  ^ pkg_alphavalue.adb:18:82:VC_INDEX_CHECK] [@GP_Id:7] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= j) /\ (j <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
           j ))))) - (64 : int)))) else (
           ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content) ((  assert {  ([#"pkg_alphavalue.adb" 20 0 0] ( [@comment:                                               OutArray(j) = 0));                                                         ^ pkg_alphavalue.adb:20:57:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__if__if__cmp__ixdcomp] [@GP_Sloc:pkg_alphavalue.adb:20:57] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:8] ( ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__last)) ) )) };
           j ))))) = (0 : int)))))) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall j   [@name:j] [@model_trace:2412]  : int.
         ( ( ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) <= j) /\ (j <= Pkg_alphavalue__alphavalue__L_1__i.i.int__content) ) -> (if (( ((97 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j)) <= (122 : int)) )) then (
          ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content j)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j)) - (96 : int)))) else ((if (( ((65 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j)) <= (90 : int)) )) then (
          ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content j)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j)) - (64 : int)))) else (
          ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content j)) = (0 : int)))))) )) )} 
        in _f) ) in (
          begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
         while True do
         invariant { 
          ([#"pkg_alphavalue.adb" 14 0 0] ( [@GP_Id:11] [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:pkg_alphavalue.adb:14:39] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__forall] [@comment:               pragma Loop_Invariant (for all j in OutArray'First..I =>                                        ^ pkg_alphavalue.adb:14:39:VC_LOOP_INVARIANT] (forall j [#"pkg_alphavalue.adb" 14 0 0]  [@name:j] [@model_trace:2412]  : int.
           ( ( ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) <= j) /\ (j <= Pkg_alphavalue__alphavalue__L_1__i.i.int__content) ) -> (if (( ((97 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j)) <= (122 : int)) )) then (
            ( [@GP_Pretty_Ada:2439] [@GP_Sloc:pkg_alphavalue.adb:16:48] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content j)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j)) - (96 : int))) )) else ((if (( ((65 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j)) <= (90 : int)) )) then (
            ( [@GP_Pretty_Ada:2461] [@GP_Sloc:pkg_alphavalue.adb:18:48] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content j)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j)) - (64 : int))) )) else (
            ( [@GP_Pretty_Ada:2473] [@GP_Sloc:pkg_alphavalue.adb:20:48] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content j)) = (0 : int)) ))))) )) ))
          }
         ( () (* Assume implicit invariants from the loop pkg_alphavalue.adb:6 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (if (( True \/ ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) )) then (
          (Pkg_alphavalue__alphavalue__L_1__T4b.dynamic_property (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr) Pkg_alphavalue__alphavalue__L_1__i.i.int__content)) else true) )/\true ) /\ (if (True) then (
          true) else (
          ( (Pkg_alphavalue__alphavalue__ToutarrayS.dynamic_property (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr) (Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) (Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__last)) /\ ( ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) = (Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr)) /\ ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__last) = (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) ))) )/\(forall temp___205   : int.
          (if (( ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) <= temp___205) /\ (temp___205 <= (Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__last)) )) then (
           (if (( ( (temp___201 < temp___205) \/ ( (temp___205 < temp___200) \/ (Pkg_alphavalue__alphavalue__L_1__i.i.int__content < temp___205) ) ) /\ ( (temp___201 < temp___205) \/ ( (temp___205 < temp___200) \/ (Pkg_alphavalue__alphavalue__L_1__i.i.int__content < temp___205) ) ) )) then (
            ((Array__Int__Standard__natural.get Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content temp___205) = (Array__Int__Standard__natural.get temp___204 temp___205))) else (
            true))) else true)) )) (( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= Pkg_alphavalue__alphavalue__L_1__i.i.int__content) /\ (Pkg_alphavalue__alphavalue__L_1__i.i.int__content <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ))) };
         () (* Check for absence of RTE in the invariant of loop pkg_alphavalue.adb:6 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop pkg_alphavalue.adb:6 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop pkg_alphavalue.adb:6 *)
         ;
         (if ((Pkg_alphavalue__alphavalue__L_1__i.i.int__content = temp___201)) then (
           raise Pkg_alphavalue__alphavalue__L_1.L_1));
         ([#"pkg_alphavalue.adb" 6 0 0] [#"pkg_alphavalue.adb" 6 0 0] (Pkg_alphavalue__alphavalue__L_1__i.i.int__content <- ( (Pkg_alphavalue__alphavalue__L_1__i.i.int__content + (1 : int)) )));
         ();
         ( [@GP_Sloc:pkg_alphavalue.adb:8:16] ([#"pkg_alphavalue.adb" 8 0 0] (if (( ([#"pkg_alphavalue.adb" 8 0 0] [#"pkg_alphavalue.adb" 8 0 0] (([@branch_id=2360] Main.spark__branch).bool__content <- ( (Boolean.andb(((65 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))) <= (90 : int)))) )));
         ( [@branch_id=2360] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:pkg_alphavalue.adb:9:20] ([#"pkg_alphavalue.adb" 9 0 0] ()) );
          ( [@GP_Sloc:pkg_alphavalue.adb:9:33] ([#"pkg_alphavalue.adb" 9 0 0] [#"pkg_alphavalue.adb" 9 0 0] (Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content) ((Standard__natural__rep.of_rep(([#"pkg_alphavalue.adb" 9 0 0] ( [@comment:                   OutArray (I) := Character'Pos(InStr(I)) - 64;                                                            ^ pkg_alphavalue.adb:9:60:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:pkg_alphavalue.adb:9:60] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_while__if__outarray_assign__sub] [@GP_Id:2] (Standard__natural.range_check_(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))) - (64 : int)))) )))))) ))) ) )) else (
          ( [@GP_Sloc:pkg_alphavalue.adb:10:16] (if (( ([#"pkg_alphavalue.adb" 10 0 0] [#"pkg_alphavalue.adb" 10 0 0] (([@branch_id=2385] Main.spark__branch).bool__content <- ( (Boolean.andb(((97 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))) <= (122 : int)))) )));
          ( [@branch_id=2385] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:pkg_alphavalue.adb:11:20] ([#"pkg_alphavalue.adb" 11 0 0] ()) );
           ( [@GP_Sloc:pkg_alphavalue.adb:11:33] ([#"pkg_alphavalue.adb" 11 0 0] [#"pkg_alphavalue.adb" 11 0 0] (Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content) ((Standard__natural__rep.of_rep(([#"pkg_alphavalue.adb" 11 0 0] ( [@GP_Sloc:pkg_alphavalue.adb:11:60] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_while__if__outarray_assign__sub] [@comment:                   OutArray (I) := Character'Pos(InStr(I)) - 96;                                                            ^ pkg_alphavalue.adb:11:60:VC_RANGE_CHECK] [@GP_Id:3] (Standard__natural.range_check_(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) (Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))) - (96 : int)))) )))))) ))) ) )) else (
           ())) )))) );
         (let temp___inv_206 [@mlw:proxy_symbol] [@introduced] = ( (let j =  (val _f : int
         in _f) in (
          (if ((Boolean.andb(((Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content in (
           ()))
           in () end ;
          Pkg_alphavalue__alphavalue__outarray.outarray__first ))) <= j)) ((j <= Pkg_alphavalue__alphavalue__L_1__i.i.int__content)))) then (
            begin ensures {true} let _ = (let _ = (if ((Boolean.andb(((97 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.adb" 15 0 0] ( [@GP_Id:10] [@GP_Shape:L_1_while__pragargs__forall__if__in__typeconv__pos_ref__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:                                          (if Character'Pos(InStr(j)) in 97..122 then                                                                     ^ pkg_alphavalue.adb:15:67:VC_INDEX_CHECK] [@GP_Sloc:pkg_alphavalue.adb:15:67] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= j) /\ (j <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
           j ))))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.adb" 15 0 0] ( [@GP_Id:10] [@GP_Shape:L_1_while__pragargs__forall__if__in__typeconv__pos_ref__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:                                          (if Character'Pos(InStr(j)) in 97..122 then                                                                     ^ pkg_alphavalue.adb:15:67:VC_INDEX_CHECK] [@GP_Sloc:pkg_alphavalue.adb:15:67] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= j) /\ (j <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
           j ))))) <= (122 : int))))) then (
            ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content) ((  assert {  ([#"pkg_alphavalue.adb" 16 0 0] ( [@vc:annotation] [@comment:                                               OutArray(j) = Character'Pos(InStr(j)) - 96                                                         ^ pkg_alphavalue.adb:16:57:VC_INDEX_CHECK] [@GP_Sloc:pkg_alphavalue.adb:16:57] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp] [@GP_Id:4] ( ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__last)) ) )) };
            j ))))) = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.adb" 16 0 0] ( [@GP_Shape:L_1_while__pragargs__forall__if__cmp__sub__typeconv__pos_ref__ixdcomp] [@vc:annotation] [@GP_Sloc:pkg_alphavalue.adb:16:82] [@comment:                                               OutArray(j) = Character'Pos(InStr(j)) - 96                                                                                  ^ pkg_alphavalue.adb:16:82:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:5] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= j) /\ (j <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
            j ))))) - (96 : int)))) else ((if ((Boolean.andb(((65 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.adb" 17 0 0] ( [@GP_Sloc:pkg_alphavalue.adb:17:70] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__if__if__in__typeconv__pos_ref__ixdcomp] [@comment:                                           elsif Character'Pos(InStr(j)) in 65..90 then                                                                      ^ pkg_alphavalue.adb:17:70:VC_INDEX_CHECK] [@GP_Id:9] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= j) /\ (j <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
           j ))))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.adb" 17 0 0] ( [@GP_Sloc:pkg_alphavalue.adb:17:70] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__if__if__in__typeconv__pos_ref__ixdcomp] [@comment:                                           elsif Character'Pos(InStr(j)) in 65..90 then                                                                      ^ pkg_alphavalue.adb:17:70:VC_INDEX_CHECK] [@GP_Id:9] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= j) /\ (j <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
           j ))))) <= (90 : int))))) then (
            ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content) ((  assert {  ([#"pkg_alphavalue.adb" 18 0 0] ( [@GP_Shape:L_1_while__pragargs__forall__if__if__cmp__ixdcomp] [@vc:annotation] [@GP_Sloc:pkg_alphavalue.adb:18:57] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:6] [@comment:                                               OutArray(j) = Character'Pos(InStr(j)) - 64                                                         ^ pkg_alphavalue.adb:18:57:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__last)) ) )) };
            j ))))) = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.adb" 18 0 0] ( [@vc:annotation] [@GP_Sloc:pkg_alphavalue.adb:18:82] [@GP_Shape:L_1_while__pragargs__forall__if__if__cmp__sub__typeconv__pos_ref__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@comment:                                               OutArray(j) = Character'Pos(InStr(j)) - 64                                                                                  ^ pkg_alphavalue.adb:18:82:VC_INDEX_CHECK] [@GP_Id:7] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= j) /\ (j <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
            j ))))) - (64 : int)))) else (
            ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content) ((  assert {  ([#"pkg_alphavalue.adb" 20 0 0] ( [@comment:                                               OutArray(j) = 0));                                                         ^ pkg_alphavalue.adb:20:57:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__if__if__cmp__ixdcomp] [@GP_Sloc:pkg_alphavalue.adb:20:57] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:8] ( ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__last)) ) )) };
            j ))))) = (0 : int)))))) in (
            ()))
            in () end ))))
         ;
          (val _f : bool
         ensures { ( (result = True) <-> (forall j   [@name:j] [@model_trace:2412]  : int.
          ( ( ((Standard__integer__rep.to_rep Pkg_alphavalue__alphavalue__outarray.outarray__first) <= j) /\ (j <= Pkg_alphavalue__alphavalue__L_1__i.i.int__content) ) -> (if (( ((97 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j)) <= (122 : int)) )) then (
           ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content j)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j)) - (96 : int)))) else ((if (( ((65 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j)) <= (90 : int)) )) then (
           ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content j)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) j)) - (64 : int)))) else (
           ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content j)) = (0 : int)))))) )) )} 
         in _f) ) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )))
       )
     with
      Pkg_alphavalue__alphavalue__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:pkg_alphavalue.adb:22:15] ([#"pkg_alphavalue.adb" 22 0 0] ()) );
   ( [@GP_Sloc:pkg_alphavalue.adb:22:7] ([#"pkg_alphavalue.adb" 22 0 0] ( [#"pkg_alphavalue.adb" 22 0 0] (pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content <- ( (Pkg_alphavalue__t_array.of_array(Pkg_alphavalue__alphavalue__outarray.outarray.Array__Int__Standard__natural.map__content) ((Standard__integer__rep.to_rep(Pkg_alphavalue__alphavalue__outarray.outarray__first))) ((Standard__integer__rep.to_rep(Pkg_alphavalue__alphavalue__outarray.outarray__last)))) ));
   [#"pkg_alphavalue.adb" 22 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ( ((  begin ensures {true} let _ = (let _ = pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content in (
   ()))
   in () end ;
  (Pkg_alphavalue__t_array.length(pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content)) ) = (  begin ensures {true} let _ = (let _ = Pkg_alphavalue__alphavalue__instr.instr in (
   ()))
   in () end ;
  (Pkg_alphavalue__t_string.length(Pkg_alphavalue__alphavalue__instr.instr)) )) && ( (let i =  (val _f : int
  in _f) in (
   (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content in (
    ()))
    in () end ;
   (Pkg_alphavalue__t_array.first(pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content)) ) <= i)) ((i <= (  begin ensures {true} let _ = (let _ = pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content in (
    ()))
    in () end ;
   (Pkg_alphavalue__t_array.last(pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content)) ))))) then (
     begin ensures {true} let _ = (let _ = (if ((Boolean.andb(((97 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.ads" 17 0 0] ( [@GP_Sloc:pkg_alphavalue.ads:17:48] [@GP_Id:18] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:pragargs__andthen__forall__if__in__typeconv__pos_ref__ixdcomp] [@comment:                       (if Character'Pos(InStr(i)) in 97..122 then                                                  ^ pkg_alphavalue.ads:17:48:VC_INDEX_CHECK] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= i) /\ (i <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
    i ))))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.ads" 17 0 0] ( [@GP_Sloc:pkg_alphavalue.ads:17:48] [@GP_Id:18] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:pragargs__andthen__forall__if__in__typeconv__pos_ref__ixdcomp] [@comment:                       (if Character'Pos(InStr(i)) in 97..122 then                                                  ^ pkg_alphavalue.ads:17:48:VC_INDEX_CHECK] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= i) /\ (i <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
    i ))))) <= (122 : int))))) then (
     ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get((Pkg_alphavalue__t_array.to_array(pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content))) ((  assert {  ([#"pkg_alphavalue.ads" 18 0 0] ( [@GP_Id:12] [@vc:annotation] [@comment:                            alphaValue'Result(i) = Character'Pos(InStr(i)) - 96                                               ^ pkg_alphavalue.ads:18:47:VC_INDEX_CHECK] [@GP_Sloc:pkg_alphavalue.ads:18:47] [@GP_Shape:pragargs__andthen__forall__if__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] ( ((Pkg_alphavalue__t_array.first pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content) <= i) /\ (i <= (Pkg_alphavalue__t_array.last pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content)) ) )) };
     i ))))) = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.ads" 18 0 0] ( [@GP_Id:13] [@comment:                            alphaValue'Result(i) = Character'Pos(InStr(i)) - 96                                                                        ^ pkg_alphavalue.ads:18:72:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:pkg_alphavalue.ads:18:72] [@GP_Shape:pragargs__andthen__forall__if__cmp__sub__typeconv__pos_ref__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= i) /\ (i <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
     i ))))) - (96 : int)))) else ((if ((Boolean.andb(((65 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.ads" 19 0 0] ( [@GP_Id:17] [@GP_Shape:pragargs__andthen__forall__if__if__in__typeconv__pos_ref__ixdcomp] [@vc:annotation] [@GP_Sloc:pkg_alphavalue.ads:19:50] [@GP_Reason:VC_INDEX_CHECK] [@comment:                       elsif Character'Pos(InStr(i)) in 65..90 then                                                  ^ pkg_alphavalue.ads:19:50:VC_INDEX_CHECK] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= i) /\ (i <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
    i ))))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.ads" 19 0 0] ( [@GP_Id:17] [@GP_Shape:pragargs__andthen__forall__if__if__in__typeconv__pos_ref__ixdcomp] [@vc:annotation] [@GP_Sloc:pkg_alphavalue.ads:19:50] [@GP_Reason:VC_INDEX_CHECK] [@comment:                       elsif Character'Pos(InStr(i)) in 65..90 then                                                  ^ pkg_alphavalue.ads:19:50:VC_INDEX_CHECK] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= i) /\ (i <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
    i ))))) <= (90 : int))))) then (
     ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get((Pkg_alphavalue__t_array.to_array(pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content))) ((  assert {  ([#"pkg_alphavalue.ads" 20 0 0] ( [@comment:                            alphaValue'Result(i) = Character'Pos(InStr(i)) - 64                                               ^ pkg_alphavalue.ads:20:47:VC_INDEX_CHECK] [@GP_Id:14] [@vc:annotation] [@GP_Sloc:pkg_alphavalue.ads:20:47] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:pragargs__andthen__forall__if__if__cmp__ixdcomp] ( ((Pkg_alphavalue__t_array.first pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content) <= i) /\ (i <= (Pkg_alphavalue__t_array.last pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content)) ) )) };
     i ))))) = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Pkg_alphavalue__t_string.to_array(Pkg_alphavalue__alphavalue__instr.instr))) ((  assert {  ([#"pkg_alphavalue.ads" 20 0 0] ( [@comment:                            alphaValue'Result(i) = Character'Pos(InStr(i)) - 64                                                                        ^ pkg_alphavalue.ads:20:72:VC_INDEX_CHECK] [@GP_Id:15] [@vc:annotation] [@GP_Sloc:pkg_alphavalue.ads:20:72] [@GP_Shape:pragargs__andthen__forall__if__if__cmp__sub__typeconv__pos_ref__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] ( ((Pkg_alphavalue__t_string.first Pkg_alphavalue__alphavalue__instr.instr) <= i) /\ (i <= (Pkg_alphavalue__t_string.last Pkg_alphavalue__alphavalue__instr.instr)) ) )) };
     i ))))) - (64 : int)))) else (
     ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get((Pkg_alphavalue__t_array.to_array(pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content))) ((  assert {  ([#"pkg_alphavalue.ads" 22 0 0] ( [@comment:                            alphaValue'Result(i) = 0)));                                                 ^ pkg_alphavalue.ads:22:47:VC_INDEX_CHECK] [@GP_Sloc:pkg_alphavalue.ads:22:47] [@GP_Id:16] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:pragargs__andthen__forall__if__if__cmp__ixdcomp] ( ((Pkg_alphavalue__t_array.first pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content) <= i) /\ (i <= (Pkg_alphavalue__t_array.last pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content)) ) )) };
     i ))))) = (0 : int)))))) in (
     ()))
     in () end ))))
  ;
   (val _f : bool
  ensures { ( (result = True) <-> (forall i   [@name:i] [@model_trace:2611]  : int.
   ( ( ((Pkg_alphavalue__t_array.first pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content) <= i) /\ (i <= (Pkg_alphavalue__t_array.last pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content)) ) -> (if (( ((97 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) i))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) i)) <= (122 : int)) )) then (
    ( [@GP_Pretty_Ada:2639] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Pkg_alphavalue__t_array.to_array pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content) i)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) i)) - (96 : int))) )) else ((if (( ((65 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) i))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) i)) <= (90 : int)) )) then (
    ( [@GP_Pretty_Ada:2663] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Pkg_alphavalue__t_array.to_array pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content) i)) = ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Pkg_alphavalue__t_string.to_array Pkg_alphavalue__alphavalue__instr.instr) i)) - (64 : int))) )) else (
    ( [@GP_Pretty_Ada:2677] ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Pkg_alphavalue__t_array.to_array pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content) i)) = (0 : int)) ))))) )) )} 
  in _f) ) ) in (
   ()))
   in () end ;
  pkg_alphavalue__alphavalue__result.Pkg_alphavalue__t_array.t_array__content )
end
